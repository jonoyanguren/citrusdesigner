generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./database.db"
}

model Contact {
    id        String   @id @default(uuid())
    name      String
    email     String
    message   String
    createdAt DateTime @default(now())
}

model Project {
    id          String   @id @default(uuid())
    title       String
    description String?
    imageUrl    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    userId      String?
    user        User?    @relation(fields: [userId], references: [id])
}

model Subscription {
    id                   String   @id @default(cuid())
    stripeUserId         String   @unique
    userId               String
    user                 User     @relation(fields: [userId], references: [id])
    stripeSubscriptionId String   @unique // ID de la suscripci√≥n de Stripe
    status               String // active, canceled, etc.
    priceId              String // ID del precio en Stripe
    productId            String // ID del producto en Stripe
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt

    @@index([userId])
}

model User {
    id                  String         @id @default(cuid())
    name                String
    email               String         @unique
    password            String
    role                String         @default("user")
    resetToken          String?
    hasToChangePassword Boolean        @default(false)
    resetTokenExpiry    DateTime?
    createdAt           DateTime       @default(now())
    updatedAt           DateTime       @updatedAt
    projects            Project[]
    subscriptions       Subscription[]
    requests            Request[]
    feedback            Feedback[]
}

enum RequestStatus {
    PENDING
    APROVED
    COMPLETED
    CANCELLED
}

model Request {
    id        String        @id @default(cuid())
    name      String
    request   String
    userId    String
    status    RequestStatus @default(PENDING)
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    user      User          @relation(fields: [userId], references: [id])
    feedback  Feedback[]

    @@index([userId])
}

model Feedback {
    id        String   @id @default(cuid())
    feedback  String
    createdAt DateTime @default(now())
    userId    String
    requestId String
    user      User     @relation(fields: [userId], references: [id])
    request   Request  @relation(fields: [requestId], references: [id])

    @@index([userId])
    @@index([requestId])
}
